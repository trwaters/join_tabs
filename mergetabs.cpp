#include "mergetabs.h"

using namespace std;

void FileMerger::run(string path)
{
  clock_t start = clock();
  set_output_path(path);
  merge_input_files();
  //write_output_log(start);
}

void FileMerger::set_output_path(string path)
{
  outputlog_fname = "Log_" + output_fname;
  output_fname = path + output_fname;
  outputlog_fname = path + outputlog_fname;
}

void FileMerger::merge_input_files()
{

  ofstream output;
  output.open(output_fname.c_str());
  write_header(output); 
  N_lines = 1;
  
  int Nfiles = fnames.size();
  for (int n=0; n<Nfiles; n++)
  {
    // Load data from file
    std::ifstream file(fnames[n].c_str()); 
    while (file)
    {
      string line;
      getline(file, line);
      if (line.length() != 0 && line[0] != '#') 
      {
        istringstream scanning_row(line);
        datavec row;
        while (scanning_row)
        {
          double data;
          scanning_row >> data;
          row.push_back(data);
        }
        output_row(output,row);
        N_lines++;
     }
    }
    file.close();
  }
 
  output.close();
}

void FileMerger::write_header(ofstream& output)
{
    // Load and write header from first file
    std::ifstream file(fnames[0].c_str()); //file(fnames[n].c_str());
    while (file)
    {
      string line;
      getline(file, line);
      if (line.length() != 0 && line[0] == '#') 
      {
        output << line << endl;
      }
      else break;
    }
    file.close();
}

void FileMerger::output_row(ofstream& output, datavec& row)
{
  output << N_lines << " "; //print counter as the first column
  int Ncolumns = row.size() - 1; //minus 1 since first column (line[0])
  								 //in Athena files is white space
  for (int i=1; i<Ncolumns; i++)
  {
     output << fixed << setprecision(PRECISION) << row[i] << " ";
  }
  output << endl; //begin a new line in file
}

void FileMerger::write_output_log(clock_t start)
{
  ofstream outfile_log;
  outfile_log.open(outputlog_fname.c_str());

  outfile_log << "=====================================" << endl
  			  << " Logfile generated by merge_tab.cpp  " << endl
  			  << "=====================================" << endl;
  

  outfile_log <<"Calculations took "<< (clock()-start)/(double)CLOCKS_PER_SEC << " seconds." << endl;
  outfile_log << endl << "Number of file lines analyzed: " << N_lines << endl
              << endl << "Merged output file: " << endl
              << output_fname << endl;

  outfile_log.close();

}

